#--------------- 1st Variance --------------------- ##
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_percentage_error

# მონაცემების ჩატვირთვა
df = pd.read_excel("/content/drive/MyDrive/DataScience/DataSource/HousePricePrediction.xlsx")

# Drop ID
df.drop(['Id'], axis=1, inplace=True)
df=df.dropna()

# Features & Target
X = df.drop('SalePrice', axis=1)
y = df['SalePrice']

# კატეგორიკული და რიცხვითი სვეტების გამოყოფა
cat_cols = X.select_dtypes(include=['object']).columns
num_cols = X.select_dtypes(exclude=['object']).columns

# კატეგორიკული Pipeline
cat_pipeline = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='most_frequent')),     # Null → frequent
    ('encoder', OneHotEncoder(handle_unknown='ignore'))       # OneHot
])

# რიცხვითი Pipeline
num_pipeline = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),              # Null → mean
    ('scaler', MinMaxScaler())                                # Scale
])

# ColumnTransformer
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', cat_pipeline, cat_cols),
        ('num', num_pipeline, num_cols)
    ]
)

# ---- მოდელები (შეგვიძლია სხვადასხვა ვცადოთ) ----

# 1) SVR Pipeline
pipe_svr = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('model', SVR())
])

# 2) RandomForest Pipeline
pipe_rf = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('model', RandomForestRegressor(n_estimators=100, random_state=42))
])

# 3) LinearRegression Pipeline
pipe_lr = Pipeline(steps=[
    ('preprocessing', preprocessor),
    ('model', LinearRegression())
])

# Train/Test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# მოდელების შეფასება
for name, pipe in [('SVR', pipe_svr), ('RandomForest', pipe_rf), ('LinearRegression', pipe_lr)]:
    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)
    mape = mean_absolute_percentage_error(y_test, y_pred)
    print(f"{name} MAPE: {mape:.4f}")
#--------------- 2nd Variance --------------------- ##
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive
drive.mount('/content/drive')
#------------------------------------------------------------------#
df = pd.read_excel("ousePricePrediction.xlsx")
#------------------------------------------------------------------#
obj = (df.dtypes == 'object')
object_cols = list(obj[obj].index)
print("Categorical variables:",len(object_cols))

int_ = (df.dtypes == 'int')
num_cols = list(int_[int_].index)
print("Integer variables:",len(num_cols))

fl = (df.dtypes == 'float')
fl_cols = list(fl[fl].index)
print("Float variables:",len(fl_cols))
#------------------------------------------------------------------#
numerical_dataset = df.select_dtypes(include=['number'])

plt.figure(figsize=(12, 6))
sns.heatmap(numerical_dataset.corr(),
            cmap = 'BrBG',
            fmt = '.2f',
            linewidths = 2,
            annot = True)
#------------------------------------------------------------------#
df.drop(['Id'], axis=1,inplace=True)
df['SalePrice'] = df['SalePrice'].fillna(df['SalePrice'].mean()) 
df.isnull().sum()
#------------------------------------------------------------------#
from sklearn import preprocessing 
# label_encoder object knows how 
# to understand word labels.
label_encoder = preprocessing.LabelEncoder()
obj = (df.dtypes == 'object')
for col in list(obj[obj].index):
  df[col] = label_encoder.fit_transform(df[col])
#------------------------------------------------------------------#
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split

X = df.drop(['SalePrice'], axis=1)
Y = df['SalePrice']

X_train, X_test, Y_train, Y_test = train_test_split(
    X, Y, train_size=0.8, test_size=0.2, random_state=0)
#------------------------------------------------------------------#
from sklearn import svm
from sklearn.svm import SVC
from sklearn.metrics import mean_absolute_percentage_error

model_SVR = svm.SVR()
model_SVR.fit(X_train,Y_train)
Y_pred = model_SVR.predict(X_test)

print(mean_absolute_percentage_error(Y_test, Y_pred))
#------------------------------------------------------------------#
from sklearn.ensemble import RandomForestRegressor

model_RFR = RandomForestRegressor(n_estimators=10)
model_RFR.fit(X_train, Y_train)
Y_pred = model_RFR.predict(X_test)

mean_absolute_percentage_error(Y_test, Y_pred)
#------------------------------------------------------------------#
from sklearn.linear_model import LinearRegression

model_LR = LinearRegression()
model_LR.fit(X_train, Y_train)
Y_pred = model_LR.predict(X_test)

print(mean_absolute_percentage_error(Y_test, Y_pred))
#------------------------------------------------------------------#









